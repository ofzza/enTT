{"version":3,"sources":["prototype/watchers.js"],"names":["Watchers","entity","all","byProperty","childWatchers","index","suppressed","callback","properties","watcherCancelFunctions","map","isArray","uniq","propertyName","forEach","fn","err","triggerChangeEvent","e","WatcherEvent","property","innerEvent","callbacks","entityValue","watch","entityValues","filter","value","cancelFunctions"],"mappings":"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","file":"prototype/watchers.js","sourcesContent":["// =====================================================================================================================\n// ENTITY PROTOTYPE Internals: Watchers registry\n// =====================================================================================================================\n\n// Import dependencies\nimport _ from 'lodash';\nimport EntityPrototype from './';\n\n/**\n * Repository of entity instance's registered watchers\n * @class Watchers\n */\nexport default class Watchers {\n\n  /**\n   * Creates an instance of Watchers.\n   * @param {any} entity Reference to the Entity instance being tracked\n   * @memberof Watchers\n   */\n  constructor (entity) {\n\n    // Store reference to parent entity instance\n    this.entity = entity;\n\n    // Initialize storage\n    this.all = {};\n    this.byProperty = {};\n    this.childWatchers = {};\n\n    // Initialize internal state\n    this.index = 0;\n    this.suppressed = false;\n\n  }\n\n  /**\n   * Sets a callback that triggers when watched property changes\n   * @param {any} callback Callback fruntion triggered on detected changes:\n   *              (e = { entity, property }) => { ... code acting on change ...}\n   * @param {any} properties Name of the property (or array  of names) that is being watched;\n   *              If no property name specified, all changes on the entity instance will trigger callback\n   * @returns {function} Function which when called, cancels the set watcher\n   * @memberof Watchers\n   */\n  registerWatcher (callback, properties) {\n    let index = this.index++;\n    if (properties) {\n\n      // Process all properties\n      let watcherCancelFunctions = _.map((_.isArray(properties) ? _.uniq(properties) : [ properties ]), (propertyName) => {\n        // Set property watcher\n        if (!this.byProperty[propertyName]) { this.byProperty[propertyName] = {}; }\n        this.byProperty[propertyName][index] = callback;\n        return () => { delete this.byProperty[propertyName][index]; };\n      });\n\n      // Return collective watcher cancelation callback function\n      return () => { _.forEach(watcherCancelFunctions, (fn) => { fn(); }); };\n\n    } else {\n\n      // Set global watcher\n      this.all[index] = callback;\n\n      // Return cancelation callback function\n      return () => { delete this.all[index]; };\n\n    }\n\n  }\n\n  /**\n   * Executes the provided function (meant to be manually applying changes to the entity instance)\n   * and when done triggers watchers.\n   * If function returns a property name or an array of property names, watchers will only trigger for those proeprties.\n   * @param {any} fn Function meant to be manually applying changes to the entity instance\n   * @memberof Watchers\n   */\n  manualUpdate (fn) {\n\n    // Suppress watchers being triggered by setters\n    this.suppressed = true;\n\n    // Execute the updating function\n    let properties;\n    try { properties = fn(); } catch (err) { err; }\n\n    // Stop suppressing watchers\n    this.suppressed = false;\n\n    // Trigger watchers\n    if (properties) {\n      // Trigger watchers for specified properties\n      _.forEach((_.isArray(properties) ? _.uniq(properties) : [ properties ]), (propertyName) => {\n        this.triggerChangeEvent(propertyName);\n      });\n    } else {\n      // Trigger all watchers\n      this.triggerChangeEvent();\n    }\n\n  }\n\n  /**\n   * Triggers watchers monitoring a property for changes\n   * @param {any} propertyName Name of the changed property; If no property name specified, all changes on the entity instance will trigger\n   * @param {any} e Embedded WatcherEvent\n   * @memberof Watchers\n   */\n  triggerChangeEvent (propertyName, e) {\n    // Check if suppressed\n    if (!this.suppressed) {\n\n      // Trigger property watchers\n      if (propertyName) {\n\n        // Trigger requested property's watchers\n        if (this.byProperty[propertyName]) {\n          _.forEach(this.byProperty[propertyName], (callback) => {\n            callback(new WatcherEvent({ entity: this.entity, property: propertyName, innerEvent: e }));\n          });\n        }\n\n      } else {\n\n        // Trigger all registered properties' watchers\n        _.forEach(this.byProperty, (callbacks, propertyName) => {\n          _.forEach(callbacks, (callback) => {\n            callback(new WatcherEvent({ entity: this.entity, property: propertyName }));\n          });\n        });\n\n      }\n\n      // Trigger global watchers\n      _.forEach(this.all, (callback) => {\n        callback(new WatcherEvent({ entity: this.entity, property: propertyName }));\n      });\n\n    }\n  }\n\n  /**\n   * Ataches to a watcher of a child entity value set inside a property\n   * @param {any} propertyName Name of the property containing the entity isntance\n   * @param {any} entityValue Entity instance being set and watched\n   * @memberof Watchers\n   */\n  watchChildEntity (propertyName, entityValue) {\n    // If already watching to property's previous entity, cancel the watcher\n    if (this.childWatchers[propertyName]) { this.childWatchers[propertyName](); }\n    // Register a watcher for the new entity - when triggered, trigger local change detected event\n    if (entityValue instanceof EntityPrototype) {\n      this.childWatchers[propertyName] = entityValue.watch((e) => {\n        this.triggerChangeEvent(propertyName, e);\n      });\n    } else if (_.isArray(entityValue)) {\n      let entityValues = _.filter(entityValue, (value) => { return (value instanceof EntityPrototype); }),\n          cancelFunctions = _.map(entityValues, (value) => {\n            return value.watch((e) => { this.triggerChangeEvent(propertyName, e); });\n          });\n      this.childWatchers[propertyName] =  () => { _.forEach(cancelFunctions, (fn) => { fn(); }); };\n    }\n  }\n\n}\n\n/**\n * Contains information of a watcher trigger event\n * @class WatcherEvent\n */\nclass WatcherEvent {\n\n  /**\n   * Creates an instance of WatcherEvent.\n   * @param {any} entity Reference to the entity that was changed\n   * @param {any} property Name of the changed property\n   * @param {any} innerEvent Inner event, passed along from child Entity\n   * @memberof WatcherEvent\n   */\n  constructor ({ entity, property, innerEvent } = {}) {\n    this.entity = entity;\n    this.property = property;\n    this.innerEvent = innerEvent;\n  }\n\n}\n"],"sourceRoot":"/source/"}