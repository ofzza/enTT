{"version":3,"sources":["prototype/initialization.js"],"names":["fetchAllFromPrototypeChain","proto","constructor","prototypes","push","Object","getPrototypeOf","reverse","modules","fetch","store","processPrototypeChainForModules","bind","debug","defineProperty","configurable","enumerable","get","clone","Error","propertyDefinitions","processPrototypeChainForPropertyDefinitions","reduce","isUndefined","forEach","isArray","module","isNil","alreadyAddedIndex","findIndex","m","name","definitions","r","def","length","isObject","merge","filter","d","property","processProperty"],"mappings":"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","file":"prototype/initialization.js","sourcesContent":["// =====================================================================================================================\n// ENTITY PROTOTYPE Internals: Initialization functions\n// =====================================================================================================================\n\n// Import dependencies\nimport _ from 'lodash';\nimport EntityPrototype from '../prototype';\nimport EntityModule from '../modules';\nimport Cache from './cache';\n\n\n/**\n * Fetch required static properties from object's prototype chain\n * @returns {any} Merged, required static properties from the object's prototype chain\n */\nexport default function fetchAllFromPrototypeChain () {\n\n  // Traverse and extract the prototype chain\n  let proto = this.constructor,\n      prototypes = [];\n  do { prototypes.push(proto); } while ((proto = Object.getPrototypeOf(proto)));\n  // Reverse prototypes array to start with prototypes deeper in the chain\n  prototypes = _.reverse(prototypes);\n\n  // Process modules (or get already processed from class' cache)\n  let modules = Cache.fetch(this, 'modules');\n  if (!modules) { Cache.store(this, 'modules', (modules = processPrototypeChainForModules.bind(this)(prototypes))); }\n  // Expose modules (read-only, returns a cloned object to prevent tampering) if debugging\n  if (EntityPrototype.debug) {\n    Object.defineProperty(this, 'modules', {\n      configurable: false,\n      enumerable: false,\n      get: () => {\n        // Allow only if debug mode\n        if (EntityPrototype.debug) {\n          return _.clone(modules);\n        } else {\n          throw new Error('Access denied!');\n        }\n      }\n    });\n  }\n\n  // Process property definitions (or get already processed from class' cache)\n  let propertyDefinitions = Cache.fetch(this, 'propertyDefinitions');\n  if (!propertyDefinitions) { Cache.store(this, 'propertyDefinitions', (propertyDefinitions = processPrototypeChainForPropertyDefinitions.bind(this)(prototypes, modules))); }\n  // Expose property definitions (read-only, returns a cloned object to prevent tampering) if debugging\n  if (EntityPrototype.debug) {\n    Object.defineProperty(this, 'propertyDefinitions', {\n      configurable: false,\n      enumerable: false,\n      get: () => {\n        // Allow only if debug mode\n        if (EntityPrototype.debug) {\n          return _.clone(propertyDefinitions);\n        } else {\n          throw new Error('Access denied!');\n        }\n      }\n    });\n  }\n\n  // Return everything collected from the prototype chain\n  return { modules, propertyDefinitions };\n\n}\n\n/**\n * Extracts all modules from the prototype chain\n * @param {any} prototypes Array of prototypes from the class' prototy chain\n * @returns {any} Array of modules applied to this class, ordered by depth in the prototype chain, starting with deeper modules\n */\nfunction processPrototypeChainForModules (prototypes) {\n\n  // Merge all static \"modules\" properties from the prototype chain\n  return _.reduce(prototypes, (modules, proto) => {\n    if (!_.isUndefined(proto.modules)) {\n      _.forEach((_.isArray(proto.modules) ? proto.modules : [ proto.modules ]), (module) => {\n        // Check if instance of EntityModule class or a NIL value\n        if (!_.isNil(module) && module instanceof EntityModule) {\n          // Check if already added\n          let alreadyAddedIndex = _.findIndex(modules, (m) => {\n            return (m.constructor === module.constructor);\n          });\n          if (alreadyAddedIndex === -1) {\n            // ... if not add as new\n            modules.push(module);\n          } else {\n            // ... if already added, replace with newer instance\n            modules[alreadyAddedIndex] = module;\n          }\n        } else {\n          // If not a NUL-value, throw an error\n          if (!_.isNil(module)) { throw new Error(`Only instances of EntityModule can be used as modules in ${ this.constructor.name } class definition! `); }\n        }\n      });\n    }\n    return modules;\n  }, []);\n\n}\n\n/**\n * Extracts all property definitions from the prototype chain\n * @param {any} prototypes Array of prototypes from the class' prototy chain\n * @param {any} modules Array of modules applied to this class\n * @returns {any} Collection of formalized property definitions for this class (property names used as keys)\n */\nfunction processPrototypeChainForPropertyDefinitions (prototypes, modules) {\n\n  // Collect definitions of all properties from the prototype chain\n  const definitions = _.reduce(prototypes, (definitions, proto) => {\n    if (!_.isUndefined(proto.propertyDefinitions)) {\n      // If property definitions defined by array, transform into object with empty definitions for further processing\n      let propertyDefinitions = (_.isArray(proto.propertyDefinitions) ? _.reduce(proto.propertyDefinitions, (r, name) => { r[name] = {}; return r; }, {}) : proto.propertyDefinitions);\n      // Process all property definitions\n      _.forEach(propertyDefinitions, (def, name) => {\n        // Check if property already has a definition\n        if (!definitions[name]) { definitions[name] = []; }\n        // Add definition (deeper nested definitions to the front of the array, to allow for proper overriding when merging difinitions)\n        definitions[name].push(def);\n      });\n    }\n    return definitions;\n  }, {});\n\n  // Allow all modules to formalize all properties' definitions\n  return _.reduce(definitions, (propertyDefinitions, def, name) => {\n    // Merge definitions from the prototype chain\n    if (!def || !def.length) {\n      // If no definitions, assume empty definition\n      def = {};\n    } else if (!_.isObject(def)) {\n      // If top definition not an object, use as definitive definition\n      def = def[0];\n    } else {\n      // Merge all object definitions\n      def = _.merge(..._.filter(def, (d) => { return _.isObject(d); }));\n    }\n    // Initialize property namespace on the property definitions object\n    propertyDefinitions[name] = {};\n    // Allow all modules to process property definition\n    _.reduce(modules, (property, module) => {\n      // Initialize module namespace on property\n      property[module.constructor.name] = module.processProperty(def);\n      return property;\n    }, propertyDefinitions[name]);\n    return propertyDefinitions;\n  }, {});\n\n}\n"],"sourceRoot":"/source/"}