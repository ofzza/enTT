{"version":3,"sources":["prototype/cache.js"],"names":["cache","Cache","t","key","value","constructor","constructorName","name","existingIndex","findIndex","stored","push","existingStored","find"],"mappings":";;;;;;;qjBAAA;AACA;AACA;;AAEA;;;AACA;;;;;;;;;;AAEA;AACA,IAAMA,QAAQ,EAAd,C,CAA0B;;AAE1B;;;;;IAIqBC,K;;;;;;;;;AAEnB;;;;;;;;0BAQcC,C,EAAGC,G,EAAKC,K,EAAO;AAC3B,UAAIC,cAAcH,EAAEG,WAApB;AAAA,UACIC,kBAAkBJ,EAAEG,WAAF,CAAcE,IADpC;AAEA,UAAI,CAACP,MAAMM,eAAN,CAAL,EAA6B;AAAEN,cAAMM,eAAN,IAAyB,EAAzB;AAA8B;AAC7D,UAAIE,gBAAgB,iBAAEC,SAAF,CAAYT,MAAMM,eAAN,CAAZ,EAAoC,UAACI,MAAD,EAAY;AAAE,eAAQA,OAAOL,WAAP,KAAuBA,WAA/B;AAA8C,OAAhG,CAApB;AACA,UAAIG,kBAAkB,CAAC,CAAvB,EAA0B;AACxBR,cAAMM,eAAN,EAAuBE,aAAvB,EAAsCL,GAAtC,GAA4CC,KAA5C;AACD,OAFD,MAEO;AACLJ,cAAMM,eAAN,EAAuBK,IAAvB,mBAA8BN,wBAA9B,IAA4CF,GAA5C,EAAkDC,KAAlD;AACD;AACF;;AAED;;;;;;;;;;;0BAQcF,C,EAAGC,G,EAAK;AACpB,UAAIE,cAAcH,EAAEG,WAApB;AAAA,UACIC,kBAAkBJ,EAAEG,WAAF,CAAcE,IADpC;AAEA,UAAIP,MAAMM,eAAN,CAAJ,EAA4B;AAC1B,YAAIM,iBAAiB,iBAAEC,IAAF,CAAOb,MAAMM,eAAN,CAAP,EAA+B,UAACI,MAAD,EAAY;AAAE,iBAAQA,OAAOL,WAAP,KAAuBA,WAA/B;AAA8C,SAA3F,CAArB;AACA,YAAIO,cAAJ,EAAoB;AAAE,iBAAOA,eAAeT,GAAf,CAAP;AAA6B;AACpD;AACF;;;;;;kBArCkBF,K","file":"prototype/cache.js","sourcesContent":["// =====================================================================================================================\n// ENTITY PROTOTYPE Internals: Entity class static cache\n// =====================================================================================================================\n\n// Import dependencies\nimport _ from 'lodash';\n\n// Define internal constants\nconst cache = { };        // Holds cached values by type name and type class reference\n\n/**\n * Manages storing and fetching class specific, static data\n * @class Cache\n */\nexport default class Cache {\n\n  /**\n   * Stores data by type name, type class reference and key\n   * @static\n   * @param {any} t \"this\" in the context of the instantiated object\n   * @param {any} key Key to store data under\n   * @param {any} value Data to store\n   * @memberof Cache\n   */\n  static store (t, key, value) {\n    let constructor = t.constructor,\n        constructorName = t.constructor.name;\n    if (!cache[constructorName]) { cache[constructorName] = []; }\n    let existingIndex = _.findIndex(cache[constructorName], (stored) => { return (stored.constructor === constructor); });\n    if (existingIndex !== -1) {\n      cache[constructorName][existingIndex].key = value;\n    } else {\n      cache[constructorName].push({ constructor, [key]: value });\n    }\n  }\n\n  /**\n   * Fetches data by type name, type class reference and key\n   * @static\n   * @param {any} t \"this\" in the context of the instantiated object\n   * @param {any} key Key to fetch data from\n   * @returns {any} Stored data\n   * @memberof Cache\n   */\n  static fetch (t, key) {\n    let constructor = t.constructor,\n        constructorName = t.constructor.name;\n    if (cache[constructorName]) {\n      let existingStored = _.find(cache[constructorName], (stored) => { return (stored.constructor === constructor); });\n      if (existingStored) { return existingStored[key]; }\n    }\n  }\n\n}\n"],"sourceRoot":"/source/"}