{"version":3,"sources":["prototype/properties.js"],"names":["initializeManagedProperties","modules","propertyDefinitions","watchers","storage","fetch","forEach","def","name","module","initializedValue","initialize","bind","constructor","isUndefined","err","message","Object","defineProperty","configurable","enumerable","get","getterModules","filter","value","updatedValue","set","setterModules","newValue","watchChildEntity","triggerChangeEvent","store"],"mappings":"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","file":"prototype/properties.js","sourcesContent":["// =====================================================================================================================\n// ENTITY PROTOTYPE Internals: Property processing and initialization functions\n// =====================================================================================================================\n\n// Import dependencies\nimport _ from 'lodash';\nimport Cache from './cache';\n\n\n/**\n * Initializes managed properties, based on property definitions, calling all modules as part of getter/setter\n * @param {any} modules Array of modules applied to this class\n * @param {any} propertyDefinitions Collection of formalized property definitions for this class (property names used as keys)\n * @param {any} watchers Repository of entity instance's registered watchers\n */\nexport default function initializeManagedProperties (modules, propertyDefinitions, watchers) {\n\n  // Initialize value storage (or get already processed from class' cache)\n  let storage = Cache.fetch(this, 'storage');\n\n  // If not loaded from cache, initialize managed properties\n  if (!storage) {\n\n    // Process managed properties and formalize their definitions per included module\n    storage = {};\n    _.forEach(propertyDefinitions, (def, name) => {\n      // Initialize values (course undefined to null)\n      _.forEach(modules, (module) => {\n        try {\n          // Try initialization if implemented\n          let initializedValue = module.initialize.bind(this)(storage[name], def[module.constructor.name]);\n          if (!_.isUndefined(initializedValue)) {\n            storage[name] = initializedValue;\n          } else if (_.isUndefined(storage[name])) {\n            storage[name] = null;\n          }\n        } catch (err) {\n          // Check if not implemented, or if legitimate error\n          if (err.message !== 'not-implemented') { throw err; }\n        }\n      });\n\n      // Initialize property\n      Object.defineProperty(this, name, {\n        configurable: false,\n        enumerable: true,\n        get: (() => {\n          // Get all modules implementing .get() method\n          let getterModules = _.filter(modules, (module) => {\n            try { module.get(null, def[module.constructor.name]); return true; } catch (err) { if (err.message !== 'not-implemented') { throw err; } }\n          });\n          // Return composed getter function\n          return () => {\n            // Get value from storage\n            let value = storage[name];\n            // Let modules process value\n            _.forEach(getterModules, (module) => {\n              let updatedValue = module.get.bind(this)(value, def[module.constructor.name]);\n              if (!_.isUndefined(updatedValue)) { value = updatedValue; }\n            });\n            // Return processed value (course undefined to null)\n            return (!_.isUndefined(value) ? value : null);\n          };\n        })(),\n        set: (() => {\n          // Get all modules implementing .set() method\n          let setterModules = _.filter(modules, (module) => {\n            try { module.set(null, def[module.constructor.name]); return true; } catch (err) { if (err.message !== 'not-implemented') { throw err; } }\n          });\n          // Return composed setter function\n          return (value) => {\n            // Let modules process value\n            _.forEach(setterModules, (module) => {\n              let updatedValue = module.set.bind(this)(value, def[module.constructor.name]);\n              if (!_.isUndefined(updatedValue)) { value = updatedValue; }\n            });\n            // Check if value changed\n            let newValue = (!_.isUndefined(value) ? value : null);\n            if (newValue !== storage[name]) {\n              // Store processed value (course undefined to null)\n              storage[name] = (!_.isUndefined(value) ? value : null);\n              // In case setting an Entity, watch for it's changes\n              watchers.watchChildEntity(name, value);\n              // Trigger watchers\n              watchers.triggerChangeEvent(name);\n            }\n          };\n        })()\n      });\n\n    });\n\n    // Cache for future instances\n    Cache.store(this, 'storage', storage);\n\n  }\n\n  // Expose storage (read-only, returns a cloned object to prevent tampering)\n  // Object.defineProperty(this, 'storage', {\n  //   configurable: false,\n  //   enumerable: false,\n  //   get: () => { return _.clone(storage); }\n  // });\n\n}\n"],"sourceRoot":"/source/"}