{"version":3,"sources":["prototype/properties.js"],"names":["initializeManagedProperties","modules","schema","watchers","storage","fetch","forEach","def","name","module","initializedValue","initialize","bind","constructor","isUndefined","Object","defineProperty","configurable","enumerable","get","value","updatedValue","set","newValue","watchChildEntity","triggerChangeEvent","store","clone"],"mappings":";;;;;kBAewBA,2B;;AAVxB;;;;AACA;;;;;;AAGA;;;;;;AATA;AACA;AACA;;AAEA;AAWe,SAASA,2BAAT,CAAsCC,OAAtC,EAA+CC,MAA/C,EAAuDC,QAAvD,EAAiE;AAAA;;AAE9E;AACA,MAAIC,UAAU,gBAAMC,KAAN,CAAY,IAAZ,EAAkB,SAAlB,CAAd;;AAEA;AACA,MAAI,CAACD,OAAL,EAAc;;AAEZ;AACAA,cAAU,EAAV;AACA,qBAAEE,OAAF,CAAUJ,MAAV,EAAkB,UAACK,GAAD,EAAMC,IAAN,EAAe;AAC/B;AACA,uBAAEF,OAAF,CAAUL,OAAV,EAAmB,UAACQ,MAAD,EAAY;AAC7B,YAAIC,mBAAmBD,OAAOE,UAAP,CAAkBC,IAAlB,QAA6BR,QAAQI,IAAR,CAA7B,EAA4CD,IAAIE,OAAOI,WAAP,CAAmBL,IAAvB,CAA5C,CAAvB;AACA,YAAI,CAAC,iBAAEM,WAAF,CAAcJ,gBAAd,CAAL,EAAsC;AACpCN,kBAAQI,IAAR,IAAgBE,gBAAhB;AACD,SAFD,MAEO,IAAI,iBAAEI,WAAF,CAAcV,QAAQI,IAAR,CAAd,CAAJ,EAAkC;AACvCJ,kBAAQI,IAAR,IAAgB,IAAhB;AACD;AACF,OAPD;;AASA;AACAO,aAAOC,cAAP,QAA4BR,IAA5B,EAAkC;AAChCS,sBAAc,KADkB;AAEhCC,oBAAY,IAFoB;AAGhCC,aAAK,eAAM;AACT;AACA,cAAIC,QAAQhB,QAAQI,IAAR,CAAZ;AACA;AACA,2BAAEF,OAAF,CAAUL,OAAV,EAAmB,UAACQ,MAAD,EAAY;AAC7B,gBAAIY,eAAeZ,OAAOU,GAAP,CAAWP,IAAX,QAAsBQ,KAAtB,EAA6Bb,IAAIE,OAAOI,WAAP,CAAmBL,IAAvB,CAA7B,CAAnB;AACA,gBAAI,CAAC,iBAAEM,WAAF,CAAcO,YAAd,CAAL,EAAkC;AAAED,sBAAQC,YAAR;AAAuB;AAC5D,WAHD;AAIA;AACA,iBAAQ,CAAC,iBAAEP,WAAF,CAAcM,KAAd,CAAD,GAAwBA,KAAxB,GAAgC,IAAxC;AACD,SAb+B;AAchCE,aAAK,aAACF,KAAD,EAAW;AACd;AACA,2BAAEd,OAAF,CAAUL,OAAV,EAAmB,UAACQ,MAAD,EAAY;AAC7B,gBAAIY,eAAeZ,OAAOa,GAAP,CAAWV,IAAX,QAAsBQ,KAAtB,EAA6Bb,IAAIE,OAAOI,WAAP,CAAmBL,IAAvB,CAA7B,CAAnB;AACA,gBAAI,CAAC,iBAAEM,WAAF,CAAcO,YAAd,CAAL,EAAkC;AAAED,sBAAQC,YAAR;AAAuB;AAC5D,WAHD;AAIA;AACA,cAAIE,WAAY,CAAC,iBAAET,WAAF,CAAcM,KAAd,CAAD,GAAwBA,KAAxB,GAAgC,IAAhD;AACA,cAAIG,aAAanB,QAAQI,IAAR,CAAjB,EAAgC;AAC9B;AACAJ,oBAAQI,IAAR,IAAiB,CAAC,iBAAEM,WAAF,CAAcM,KAAd,CAAD,GAAwBA,KAAxB,GAAgC,IAAjD;AACA;AACAjB,qBAASqB,gBAAT,CAA0BhB,IAA1B,EAAgCY,KAAhC;AACA;AACAjB,qBAASsB,kBAAT,CAA4BjB,IAA5B;AACD;AACF;AA9B+B,OAAlC;AAiCD,KA7CD;;AA+CA;AACA,oBAAMkB,KAAN,CAAY,IAAZ,EAAkB,SAAlB,EAA6BtB,OAA7B;AAED;;AAED;AACAW,SAAOC,cAAP,CAAsB,IAAtB,EAA4B,SAA5B,EAAuC;AACrCC,kBAAc,KADuB;AAErCC,gBAAY,KAFyB;AAGrCC,SAAK,eAAM;AAAE,aAAO,iBAAEQ,KAAF,CAAQvB,OAAR,CAAP;AAA0B;AAHF,GAAvC;AAMD","file":"prototype/properties.js","sourcesContent":["// =====================================================================================================================\n// ENTITY PROTOTYPE Internals: Property processing and initialization functions\n// =====================================================================================================================\n\n// Import dependencies\nimport _ from 'lodash';\nimport Cache from './cache';\n\n\n/**\n * Initializes managed properties, based on schema definitions, calling all modules as part of getter/setter\n * @param {any} modules Array of modules applied to this class\n * @param {any} schema Collection of formalized property definitions for this class (property names used as keys)\n * @param {any} watchers Repository of entity instance's registered watchers\n */\nexport default function initializeManagedProperties (modules, schema, watchers) {\n\n  // Initialize value storage (or get already processed from class' cache)\n  let storage = Cache.fetch(this, 'storage');\n\n  // If not loaded from cache, initialize managed properties\n  if (!storage) {\n\n    // Process managed properties and formalize their definitions per included module\n    storage = {};\n    _.forEach(schema, (def, name) => {\n      // Initialize values (course undefined to null)\n      _.forEach(modules, (module) => {\n        let initializedValue = module.initialize.bind(this)(storage[name], def[module.constructor.name]);\n        if (!_.isUndefined(initializedValue)) {\n          storage[name] = initializedValue;\n        } else if (_.isUndefined(storage[name])) {\n          storage[name] = null;\n        }\n      });\n\n      // Initialize property\n      Object.defineProperty(this, name, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          // Get value from storage\n          let value = storage[name];\n          // Let modules process value\n          _.forEach(modules, (module) => {\n            let updatedValue = module.get.bind(this)(value, def[module.constructor.name]);\n            if (!_.isUndefined(updatedValue)) { value = updatedValue; }\n          });\n          // Return processed value (course undefined to null)\n          return (!_.isUndefined(value) ? value : null);\n        },\n        set: (value) => {\n          // Let modules process value\n          _.forEach(modules, (module) => {\n            let updatedValue = module.set.bind(this)(value, def[module.constructor.name]);\n            if (!_.isUndefined(updatedValue)) { value = updatedValue; }\n          });\n          // Check if value changed\n          let newValue = (!_.isUndefined(value) ? value : null);\n          if (newValue !== storage[name]) {\n            // Store processed value (course undefined to null)\n            storage[name] = (!_.isUndefined(value) ? value : null);\n            // In case setting an Entity, watch for it's changes\n            watchers.watchChildEntity(name, value);\n            // Trigger watchers\n            watchers.triggerChangeEvent(name);\n          }\n        }\n      });\n\n    });\n\n    // Cache for future instances\n    Cache.store(this, 'storage', storage);\n\n  }\n\n  // Expose storage (read-only, returns a cloned object to prevent tampering)\n  Object.defineProperty(this, 'storage', {\n    configurable: false,\n    enumerable: false,\n    get: () => { return _.clone(storage); }\n  });\n\n}\n"],"sourceRoot":"/source/"}