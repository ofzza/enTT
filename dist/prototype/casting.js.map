{"version":3,"sources":["prototype/casting.js"],"names":["castAsEntity","castCollectionAsEntity","value","EntityClass","prototype","Error","entity","forEach","none","key","isUndefined","collection"],"mappings":";;;;;QAcgBA,Y,GAAAA,Y;QA6BAC,sB,GAAAA,sB;;AAtChB;;;;AACA;;;;;;AAEA;;;;;;AARA;AACA;AACA;;AAEA;AAUO,SAASD,YAAT,CAAuBE,KAAvB,EAA8BC,WAA9B,EAA2C;;AAEhD;AACA,MAAI,CAACA,WAAD,IAAgB,EAAEA,YAAYC,SAAZ,sBAAF,CAApB,EAAyE;AACvE,UAAM,IAAIC,KAAJ,CAAU,qEAAV,CAAN;AACD;;AAED;AACA,MAAMC,SAAS,IAAIH,WAAJ,EAAf;;AAEA;AACA,MAAID,KAAJ,EAAW;AACT,qBAAEK,OAAF,CAAUD,MAAV,EAAkB,UAACE,IAAD,EAAOC,GAAP,EAAe;AAC/B;AACA,UAAI,CAAC,iBAAEC,WAAF,CAAcR,MAAMO,GAAN,CAAd,CAAL,EAAgC;AAAEH,eAAOG,GAAP,IAAcP,MAAMO,GAAN,CAAd;AAA2B;AAC9D,KAHD;AAID;;AAED;AACA,SAAOH,MAAP;AAED;;AAED;;;;;;AAMO,SAASL,sBAAT,CAAiCU,UAAjC,EAA6CR,WAA7C,EAA0D;AAC/D;AACAQ,aAAYR;AACZ,SAAO,EAAP;AACD","file":"prototype/casting.js","sourcesContent":["// =====================================================================================================================\n// ENTITY PROTOTYPE Internals: Casting\n// =====================================================================================================================\n\n// Import dependencies\nimport _ from 'lodash';\nimport EntityPrototype from './';\n\n/**\n * Casts value as entity by copying content of all properties found on both\n * @param {any} value Value to cast\n * @param {any} EntityClass Target casting Entity class\n * @returns {any} Cast instance of required Entity class\n */\nexport function castAsEntity (value, EntityClass) {\n\n  // Verify target entity class\n  if (!EntityClass || !(EntityClass.prototype instanceof EntityPrototype)) {\n    throw new Error('Only casting to classes extending the Entity base class is allowed!');\n  }\n\n  // Initialize casting target\n  const entity = new EntityClass();\n\n  // Attempt copying properties from casting source\n  if (value) {\n    _.forEach(entity, (none, key) => {\n      // Copy value if  property exists on source\n      if (!_.isUndefined(value[key])) { entity[key] = value[key]; }\n    });\n  }\n\n  // Return cast entity\n  return entity;\n\n}\n\n/**\n * Casts collection of values as a collection of entities by casting each mamber of the collection\n * @param {any} collection Collection to cast\n * @param {any} EntityClass Target casting Entity class\n * @returns {any} Cast collection\n */\nexport function castCollectionAsEntity (collection, EntityClass) {\n  // TODO: ...\n  collection; EntityClass;\n  return [];\n}\n"],"sourceRoot":"/source/"}