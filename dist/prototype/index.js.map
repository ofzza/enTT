{"version":3,"sources":["prototype/index.js"],"names":["EntityPrototype","value","entityClass","bind","debug","constructor","Error","modules","schema","watchers","Object","defineProperty","configurable","enumerable","get","callback","properties","registerWatcher","fn","manualUpdate"],"mappings":";;;;;;;qjBAAA;AACA;AACA;AACA;;AAEA;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA;;;;;IAKqBA,e;;;;;AAUnB;;;;;;;;yBAQaC,K,EAAOC,W,EAAa;AAAE,aAAO,kBAAaC,IAAb,CAAkB,IAAlB,EAAwBF,KAAxB,EAA+BC,WAA/B,CAAP;AAAqD;;AAExF;;;;;;;;;AAlBA;;;;;wBAKoB;AAAE,aAAO,gBAAME,KAAb;AAAqB,K;sBACzBH,K,EAAO;AAAE,sBAAMG,KAAN,GAAcH,KAAd;AAAsB;;;AAgBjD,6BAAe;AAAA;;AAEb;AACA,QAAI,KAAKI,WAAL,KAAqBL,eAAzB,EAA0C;AACxC,YAAM,IAAIM,KAAJ,CAAU,iGAAV,CAAN;AACD;;AAED;;AAPa,gCAQa,yBAA2BH,IAA3B,CAAgC,IAAhC,GARb;AAAA,QAQPI,OARO,yBAQPA,OARO;AAAA,QAQEC,MARF,yBAQEA,MARF;;AAUb;;;AACA,QAAMC,WAAW,uBAAa,IAAb,CAAjB;AACA;AACAC,WAAOC,cAAP,CAAsB,IAAtB,EAA4B,OAA5B,EAAqC;AACnCC,oBAAc,KADqB;AAEnCC,kBAAY,KAFuB;AAGnCC,WAAK,eAAM;;AAET;;;;;;;;;AASA,eAAO,UAACC,QAAD,EAAiC;AAAA,cAAtBC,UAAsB,uEAAT,IAAS;AAAE,iBAAOP,SAASQ,eAAT,CAAyBF,QAAzB,EAAmCC,UAAnC,CAAP;AAAwD,SAAlG;AAED;AAhBkC,KAArC;AAkBA;AACAN,WAAOC,cAAP,CAAsB,IAAtB,EAA4B,QAA5B,EAAsC;AACpCC,oBAAc,KADsB;AAEpCC,kBAAY,KAFwB;AAGpCC,WAAK,eAAM;;AAET;;;;;;;AAOA,eAAO,UAACI,EAAD,EAAQ;AAAET,mBAASU,YAAT,CAAsBD,EAAtB;AAA4B,SAA7C;AAED;AAdmC,KAAtC;;AAiBA;AACA,yBAA4Bf,IAA5B,CAAiC,IAAjC,EAAuCI,OAAvC,EAAgDC,MAAhD,EAAwDC,QAAxD;AAED;;;;;kBA5EkBT,e","file":"prototype/index.js","sourcesContent":["// =====================================================================================================================\n// ENTITY: Basic class prototype\n// TODO: Allow subscribing to changes (via setters or manual updated notification)\n// =====================================================================================================================\n\n// Import dependencies\nimport castAsEntity from './casting';\nimport fetchAllFromPrototypeChain from './initialization';\nimport initializeManagedProperties from './properties';\nimport Debug from './debug';\nimport Watchers from './watchers';\n\n/**\n * Entity prototype class\n * @export\n * @class EntityPrototype\n */\nexport default class EntityPrototype {\n\n  /**\n   * Debugging status (When debugging, some extra properties are exposed)\n   * @static\n   * @memberof EntityPrototype\n   */\n  static get debug () { return Debug.debug; }\n  static set debug (value) { Debug.debug = value; }\n\n  /**\n   * Casts value as entity by copying content of all properties found on both\n   * @static\n   * @param {any} value Value to cast\n   * @param {any} entityClass Target casting Entity class\n   * @returns {any} Cast instance of required Entity class\n   * @memberof Watchers\n   */\n  static cast (value, entityClass) { return castAsEntity.bind(this)(value, entityClass); }\n\n  /**\n   * Creates an instance of EntityPrototype.\n   * @memberof EntityPrototype\n   */\n  constructor () {\n\n    // Check if class neing directly instantiated\n    if (this.constructor === EntityPrototype) {\n      throw new Error('EntityPrototype class is not meant to be instantiated directly - extend it with your own class!');\n    }\n\n    // Check if prototype contains static definition property - if so validate and process it\n    let { modules, schema } = fetchAllFromPrototypeChain.bind(this)();\n\n    // Initialize watchers repository\n    const watchers = new Watchers(this);\n    // Expose watch method\n    Object.defineProperty(this, 'watch', {\n      configurable: false,\n      enumerable: false,\n      get: () => {\n\n        /**\n         * Sets a callback that triggers when watched property changes\n         * @param {any} callback Callback fruntion triggered on detected changes:\n         *              (e = { entity, property }) => { ... code acting on change ...}\n         * @param {any} properties Name of the property (or array  of names) that is being watched;\n         *              If no property name specified, all changes on the entity instance will trigger callback\n         * @returns {function} Function which when called, cancels the set watcher\n         * @memberof EntityPrototype\n         */\n        return (callback, properties = null) => { return watchers.registerWatcher(callback, properties); };\n\n      }\n    });\n    // Expose update method\n    Object.defineProperty(this, 'update', {\n      configurable: false,\n      enumerable: false,\n      get: () => {\n\n        /**\n         * Executes the provided function (meant to be manually applying changes to the entity instance)\n         * and when done triggers watchers.\n         * If function returns a property name or an array of property names, watchers will only trigger for those proeprties.\n         * @param {any} fn Function meant to be manually applying changes to the entity instance\n         * @memberof Watchers\n         */\n        return (fn) => { watchers.manualUpdate(fn); };\n\n      }\n    });\n\n    // Initialize managed properties based on schema definition\n    initializeManagedProperties.bind(this)(modules, schema, watchers);\n\n  }\n\n}\n"],"sourceRoot":"/source/"}