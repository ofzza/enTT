{"version":3,"sources":["modules/dynamic-value/index.js"],"names":["DynamicValueEntityModule","def","formal","dynamic","isFunction","prototype","value","bind"],"mappings":";;;;;;;;;AAKA;;;;AACA;;;;AACA;;;;;;;;;;+eAPA;AACA;AACA;;AAEA;;;AAKA;;;;;;;IAOqBA,wB;;;;;;;;;;;oCAEFC,G,EAAK;AACpB;AACA,UAAMC,SAAS,EAAf;AACA;AACA,UAAID,OAAOA,IAAIE,OAAf,EAAwB;AACtB;AACAD,eAAOC,OAAP,GAAiBF,IAAIE,OAArB;AACD,OAHD,MAGO,IAAI,iBAAEC,UAAF,CAAaH,GAAb,MAAsB,CAACA,IAAII,SAAL,IAAkB,EAAEJ,IAAII,SAAJ,+BAAF,CAAxC,CAAJ,EAA0F;AAC/F;AACAH,eAAOC,OAAP,GAAiBF,GAAjB;AACD;AACD;AACA,aAAOC,MAAP;AACD;;;wBAEII,K,EAAOJ,M,EAAQ;AAClB;AACA,UAAIA,OAAOC,OAAX,EAAoB;AAAE,eAAOD,OAAOC,OAAP,CAAeI,IAAf,CAAoB,IAApB,GAAP;AAAqC;AAC5D;;;wBAEID,K,EAAOJ,M,EAAQ;AAClB;AACA,UAAIA,OAAOC,OAAX,EAAoB;AAAE,eAAO,IAAP;AAAc;AACrC;;;;;;kBAzBkBH,wB","file":"modules/dynamic-value/index.js","sourcesContent":["// =====================================================================================================================\n// ENTITY: Entity Dynamic Value Module\n// =====================================================================================================================\n\n// Import dependencies\nimport _ from 'lodash';\nimport EntityModule from '../';\nimport EntityPrototype from '../../prototype';\n\n/**\n * Dynamic value module, included directly into Entity base class,\n * provides support for read-only, dynamically generated properties\n * @export\n * @class DynamicValueEntityModule\n * @extends {EntityModule}\n */\nexport default class DynamicValueEntityModule extends EntityModule {\n\n  processProperty (def) {\n    // Initialize formal definition\n    const formal = {};\n    // Check for dynamic value function value\n    if (def && def.dynamic) {\n      // Assign explicitly defined function\n      formal.dynamic = def.dynamic;\n    } else if (_.isFunction(def) && (!def.prototype || !(def.prototype instanceof EntityPrototype))) {\n      // Assign short-hand definition\n      formal.dynamic = def;\n    }\n    // Return formal definition\n    return formal;\n  }\n\n  get (value, formal) {\n    // If defined as dynamic property, use dynamic function to calculate value\n    if (formal.dynamic) { return formal.dynamic.bind(this)(); }\n  }\n\n  set (value, formal) {\n    // If defined as dynamic property, block setting a value\n    if (formal.dynamic) { return null; }\n  }\n\n}\n"],"sourceRoot":"/source/"}