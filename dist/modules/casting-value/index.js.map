{"version":3,"sources":["modules/casting-value/index.js"],"names":["CastingValueEntityModule","def","formal","castAs","prototype","collection","isArray","length","value","isNil","cast","reduce","key"],"mappings":";;;;;;;;;AAKA;;;;AACA;;;;AACA;;;;;;;;;;+eAPA;AACA;AACA;;AAEA;;;AAKA;;;;;;;IAOqBA,wB;;;;;;;;;;;oCAEFC,G,EAAK;AACpB;AACA,UAAMC,SAAS,EAAf;AACA;AACA,UAAID,OAAOA,IAAIE,MAAX,IAAqBF,IAAIE,MAAJ,CAAWC,SAAX,+BAAzB,EAA0E;AACxE;AACAF,eAAOC,MAAP,GAAgBF,IAAIE,MAApB;AACAD,eAAOG,UAAP,GAAqBJ,IAAII,UAAJ,GAAiB,IAAjB,GAAwB,KAA7C;AACD,OAJD,MAIO;AACL;AACAJ,cAAMA,IAAIE,MAAJ,IAAcF,GAApB;AACA,YAAIA,OAAOA,IAAIG,SAAJ,+BAAX,EAAqD;AACnD;AACAF,iBAAOC,MAAP,GAAgBF,GAAhB;AACAC,iBAAOG,UAAP,GAAoB,KAApB;AACD,SAJD,MAIO,IAAI,iBAAEC,OAAF,CAAUL,GAAV,KAAkBA,IAAIM,MAAJ,KAAe,CAAjC,IAAsCN,IAAI,CAAJ,EAAOG,SAAP,+BAA1C,EAAuF;AAC5F;AACAF,iBAAOC,MAAP,GAAgBF,IAAI,CAAJ,CAAhB;AACAC,iBAAOG,UAAP,GAAoB,IAApB;AACD;AACF;AACD;AACA,aAAOH,MAAP;AACD;;;wBAEIM,K,EAAON,M,EAAQ;AAClB,UAAIA,OAAOC,MAAX,EAAmB;AACjB,YAAI,iBAAEM,KAAF,CAAQD,KAAR,CAAJ,EAAoB;AAClB;AACA,iBAAO,IAAP;AACD,SAHD,MAGO,IAAI,CAACN,OAAOG,UAAZ,EAAwB;AAC7B;AACA,cAAIG,iBAAiBN,OAAOC,MAA5B,EAAoC;AAClC;AACA,mBAAOK,KAAP;AACD,WAHD,MAGO;AACL;AACA,mBAAO,oBAAgBE,IAAhB,CAAqBF,KAArB,EAA4BN,OAAOC,MAAnC,CAAP;AACD;AACF,SATM,MASA;AACL;AACA,iBAAO,iBAAEQ,MAAF,CAASH,KAAT,EAAgB,UAACH,UAAD,EAAaG,KAAb,EAAoBI,GAApB,EAA4B;AACjD;AACA,gBAAIJ,iBAAiBN,OAAOC,MAA5B,EAAoC;AAClC;AACAE,yBAAWO,GAAX,IAAkBJ,KAAlB;AACD,aAHD,MAGO;AACL;AACAH,yBAAWO,GAAX,IAAkB,oBAAgBF,IAAhB,CAAqBF,KAArB,EAA4BN,OAAOC,MAAnC,CAAlB;AACD;AACD,mBAAOE,UAAP;AACD,WAVM,EAUH,iBAAEC,OAAF,CAAUE,KAAV,IAAmB,EAAnB,GAAwB,EAVrB,CAAP;AAWD;AACF;AACF;;;;;;kBAxDkBR,wB","file":"modules/casting-value/index.js","sourcesContent":["// =====================================================================================================================\n// ENTITY: Entity Casting Value Module\n// =====================================================================================================================\n\n// Import dependencies\nimport _ from 'lodash';\nimport EntityModule from '../';\nimport EntityPrototype from '../../prototype';\n\n/**\n * Casting value module, included directly into Entity base class,\n * provides support for properties which will attempt to cast their value as an Entity instance of a given type\n * @export\n * @class CastingValueEntityModule\n * @extends {EntityModule}\n */\nexport default class CastingValueEntityModule extends EntityModule {\n\n  processProperty (def) {\n    // Initialize formal definition\n    const formal = {};\n    // Check for casting definition\n    if (def && def.castAs && def.castAs.prototype instanceof EntityPrototype) {\n      // Assign explicitly defined casting\n      formal.castAs = def.castAs;\n      formal.collection = (def.collection ? true : false);\n    } else {\n      // Parse value, and check if representing a cast definition\n      def = def.castAs || def;\n      if (def && def.prototype instanceof EntityPrototype) {\n        // Formalize single casting\n        formal.castAs = def;\n        formal.collection = false;\n      } else if (_.isArray(def) && def.length === 1 && def[0].prototype instanceof EntityPrototype) {\n        // Formalize collection casting\n        formal.castAs = def[0];\n        formal.collection = true;\n      }\n    }\n    // Return formal definition\n    return formal;\n  }\n\n  set (value, formal) {\n    if (formal.castAs) {\n      if (_.isNil(value)) {\n        // If setting null, allow null value\n        return null;\n      } else if (!formal.collection) {\n        // Check if already cast\n        if (value instanceof formal.castAs) {\n          // Keep current casting\n          return value;\n        } else {\n          // Attempt casting value directly\n          return EntityPrototype.cast(value, formal.castAs);\n        }\n      } else {\n        // Attempt casting value as a collection of castable values\n        return _.reduce(value, (collection, value, key) => {\n          // Check if already cast\n          if (value instanceof formal.castAs) {\n            // Keep current casting\n            collection[key] = value;\n          } else {\n            // Attempt casting value\n            collection[key] = EntityPrototype.cast(value, formal.castAs);\n          }\n          return collection;\n        }, (_.isArray(value) ? [] : {}));\n      }\n    }\n  }\n\n}\n"],"sourceRoot":"/source/"}